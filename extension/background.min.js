
main();

function main() {
	// How often to poll for changes to IP or User, in minutes
	var pollInterval = 10;
	// Maximum wait time before submitting information to web service, in minutes
	var maxInterval = 59;
	var lastPost = 0;
	var errors = [];
	var CurrentIP = '0.0.0.0';
	// Set the default user that will be used if the current user can't be determined
	var CurrentUser = 'chromeuser@#yourdomain#';
	// URL of web service to submit user information to
	var urlPost = '#locationToIndex.php#';

	chrome.alarms.onAlarm.addListener(function(alarm) {
		if (alarm.name == 'poll') {
			console.log('Polling for user information changes');
			pollUserInfo();
		} else {
			console.log('Unknown alarm event received - '+alarm.name);
		}
	});

	$.when(
		getPolicies()
	).then(function( policies ) {
		if (policies.PollInterval) pollInterval = policies.PollInterval;
		if (policies.MaxInterval) maxInterval = policies.MaxInterval;
		if (policies.DefaultUser) CurrentUser = policies.DefaultUser;
		if (policies.PostUrl) urlPost = policies.PostUrl;
		console.log('Polling Interval: '+pollInterval+', Max Interval: '+maxInterval+', Fallback User: '+CurrentUser);
		//If the device has network, poll user info and create an alarm for future polling.
		if (navigator.onLine) {
			pollUserInfo();
			chrome.alarms.create('poll', {delayInMinutes: pollInterval, periodInMinutes: pollInterval} );
		}
		//add listener for network offline
		window.addEventListener('offline', function(e) {
			console.log('Network offline - stop polling');
			chrome.alarms.clear('poll');
		});
		//add listener for network online
		window.addEventListener('online', function(e) {
			console.log('Network restored - restart polling');
			pollUserInfo();
			chrome.alarms.create('poll', {delayInMinutes: pollInterval, periodInMinutes: pollInterval} );
		});
	});

	// Polls for changes to User or IP
	function pollUserInfo() {
		$.when(
			getUserEmail(),
			getSystemIP()
		).then(function( newUser, newIP ) {
			errors = [new Date()];
			console.log('Polled IP: '+newIP+', Polled User: '+newUser);
			if (((Date.now()-lastPost) > (maxInterval*6e4)) || (newIP != CurrentIP) || (newUser != CurrentUser)) {
				CurrentIP = newIP;
				CurrentUser = newUser;
				console.log('Change detected or maximum post interval reached');
				sendUserInfo();
			}
		});
	}

	// Reads the email address from the local profile
	function getUserEmail() {
		var deferred = $.Deferred();
		chrome.identity.getProfileUserInfo(function(result) {
			console.log('Found profile user '+result.email);
			if (result.email.indexOf('#yourGoogleDomain#') > 0) {
				deferred.resolve(result.email);
			} else {
				errors.push('No #yourGoogleDomain# user found: '+result.email);
				deferred.resolve(CurrentUser);  // Return CurrentUser if no email address found
			}
		});
		return deferred.promise();
	}

	// Get the current system IP address
	function getSystemIP() {
		var deferred = $.Deferred();	
		chrome.system.network.getNetworkInterfaces(function(result) {
			var ips = [];
			for(var i = 0; i < result.length; i++) {
				var ip = result[i].address;
				if (/^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(ip)) {
					ips.push(ip);
					console.log('Found IPv4 address '+ip);
				}
			}
			deferred.resolve(ips[0]);  // Return only the first IP address found
		});
		return deferred.promise();
	}
	
	// Reads the managed policies for the extension
	function getPolicies() {
		var deferred = $.Deferred();
		chrome.storage.managed.get(null, function(result) {
			deferred.resolve(result);
		});
		return deferred.promise();
	}

	// Submits user information to the web service for processing
	function sendUserInfo() {
		console.log('Submitting user info to web service - IP:'+CurrentIP+',Username:'+CurrentUser);
		$.ajax({
			type: 'POST',
			url: urlPost,
			data: {
				ips: CurrentIP,
				username: CurrentUser,
				id: getID(),
				error: errors.join('|'),
				extver: chrome.runtime.getManifest().version,
				osver: getChromeVer()
			}
		}).retry({
			times: 3,
			timeout: 3e3
		}).done(function() {
			console.log('Finished submitting user info to web service');
			//console.log('Errors: '+errors.join('|'));
			lastPost = Date.now();
		})
	}

	// Parses user agent string to get Chrome version
	function getChromeVer() {
		return window.navigator.userAgent.match(/Chrome\/(.*?) /)[1];
	}
	
	// Creates unique ID to validate data submitted to web service
	function getID() {
		// Create a custom function that generates a unique ID which can be verified by the web service to validate data
		return true;
	}
}